@page "/checkout"
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

<div class="main">
    <div class="checkout-cols">
        <div class="checkout-order-details">
            <h4>Review order</h4>
            <OrderReview Order="Order" />
        </div>

        <div class="checkout-delivery-address">
            <h4>Deliver to...</h4>
            <EditForm EditContext="editContext" OnValidSubmit="PlaceOrder">
                <DataAnnotationsValidator />
                <AddressEditor Address="Order.DeliveryAddress" />
                <ValidationSummary />
                <button class="checkout-button btn btn-warning" type="submit" disabled="@isError">Place Order</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    Order Order => OrderState.Order;
    private EditContext editContext;
    bool isError = true;

    protected override void OnInitialized()
    {
        editContext = new EditContext(Order.DeliveryAddress);
        editContext.OnFieldChanged += HandleFieldChanged;
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }

    async Task PlaceOrder()
    {
        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}orders", OrderState.Order);
        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}
